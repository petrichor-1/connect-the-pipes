Import "secretblocks.htn"
Import "advanced.htn"
Import "./winScreen.htn"
Import "./loadingScreen.htn"
Import "./levelGeneratorBlocks.htn"
Import "./displayTiles.htn"
Import "./lists.htn"
Import "./animation.htn"


Scene game:
	text level_generator(text: ""):
		When game_starts:
			check_if_else(Self.clone_index == 0):
				Game.generated_levels = 0
				Game.generated_levels_list_offset = 0
				create_a_clone_of_this_object
			else:
				destroy
		When object_is_cloned:
			set_background(color: h(Game.primary_color_hue, s: Game.primary_color_saturation, b: Game.primary_color_brightness))
			custom_block create_list(length_length: 2, content_index_length: 4)
			Game.generated_levels = Self.‚Ü©Ô∏èüìäcreated_list
			Game.generated_levels_list_offset = Game.current_level_index
			index_of_level_generation = Game.current_level_index
			repeat_forever:
				check_if_else(length(Game.generated_levels) < 2500):
					custom_block generate_level(width: Game.board_width, height: Game.board_height, seed: index_of_level_generation)
					custom_block append_to(list: Game.generated_levels, new_item: Self.‚Ü©Ô∏ègenerated_board)
					Game.generated_levels = Self.‚Ü©Ô∏èüìäappended_list
					increase(index_of_level_generation, by: 1)
					# show_popup(message: Game.generated_levels)
				else:
					check_once_if(Game.current_level_index > Game.generated_levels_list_offset):
						list = Game.generated_levels
						new_offset = Game.generated_levels_list_offset
						repeat(times: Game.current_level_index - Game.generated_levels_list_offset):
							custom_block remove_item_in(list: list, at_index: 0)
							# show_popup(message: join("Before: ", with: join(list, with: join("
							# 
							# after: ", with: Self.‚Ü©Ô∏èüìäremoved_list))))
							list = Self.‚Ü©Ô∏èüìäremoved_list
							increase(new_offset, by: 1)
						custom_block rebuild(list: list)
						Game.generated_levels = Self.‚Ü©Ô∏èüìärebuilt_list
						Game.generated_levels_list_offset = new_offset

	text tiles(text: ""):
		Self.üì£check_board = "Check board for finished"
		Game.üì£play = "play"
		Game.üì£Success = "Success!"
		Self.üì£first_hint = "just do the first possible hint"
		When game_starts:
			broadcast_message(named: Game.üì£play)
		When i_get_a_message(Game.üì£play):
			check_if_else(Self.clone_index == 0):
				Game.is_loading = "true"
				# show_popup(message: join("Looking for level with index ", with: Game.current_level_index))
				custom_block wait_for_level_with(index: Game.current_level_index)
				custom_block get_item_in(list: Game.generated_levels, at_index: Game.current_level_index - Game.generated_levels_list_offset)
				Self.board = Self.‚Ü©Ô∏èüìälist_item
				# Self.board = "|||R||RL||UL||RU||UL|||R|RULRUDL|RDL|UDL|||R|RDL|RDL||RL|UDL|||U|||R||RL||UL||UD||RD||RL||RL|RDL||DL:"
				create_clones_of_this_object(times: Game.board_width * Game.board_height)
				Game.is_loading = "false"
				Game.total_taps = 0
				# show_popup(message: Self.board)
			else:
				Original_object.clone_index_offset = Self.clone_index
				destroy
		When object_is_cloned:
			clone_index = Self.clone_index - Original_object.clone_index_offset - 1
			Self.index = clone_index
			x = clone_index % Game.board_width
			Self.x = x
			y = floor(clone_index / Game.board_width)
			Self.y = y
			Self.tile_size = min(Game.height * 0.6 / Game.board_height, Game.width * 0.6 / Game.board_width)
			Self.origin_position_x = Game.width / 2 - Self.tile_size * Game.board_width / 2 + Self.tile_size / 2
			Self.origin_position_y = Game.height / 2 - Self.tile_size * Game.board_height / 2 + Self.tile_size / 2
			custom_block get_tile_at(x: x, y: y, board: Self.board, width: Game.board_width)
			custom_block set_image_for(tile: Self.‚Ü©Ô∏ètile)
			# set_text(to: Self.‚Ü©Ô∏ètile, color: h(0,s:0,b:0))
			wait(seconds: 0)
			aspect_ratio = Self.height / Self.width
			set_width(Self.tile_size * Self.üì∫width_multiplier, height: aspect_ratio * Self.tile_size * Self.üì∫height_multiplier)
			set_color(h(Game.primary_color_hue, s: Game.primary_color_saturation + 60, b: Game.primary_color_brightness + 50))
		When object_is_cloned:
			Self.center_x_position = Self.origin_position_x + Self.tile_size * Self.x
			Self.center_y_position = Self.origin_position_y + Self.tile_size * Self.y
			Self.times_tapped = random(0, to: 3)
			Self.displayed_rotation = Self.times_tapped * 90
		When Self.clone_index > 0:
			set_position(to_x: Self.center_x_position + Self.tile_size * Self.üì∫offset_radius * cos(Self.üì∫offset_angle + Self.displayed_rotation), y: Self.center_y_position + Self.tile_size * Self.üì∫offset_radius * sin(Self.üì∫offset_angle + Self.displayed_rotation))
		When Self.clone_index > 0:
			set_angle(Self.üì∫rotation_offset + Self.displayed_rotation)
		When Self.displayed_rotation != Self.times_tapped * 90:
			custom_block ease_self_displayed_rotation(from: Self.displayed_rotation, to: Self.times_tapped * 90, milliseconds: 100)
		When is_tapped(Screen):
			check_once_if(absolute_value(Game.last_touch_x - Self.center_x_position) < Self.tile_size / 2 and absolute_value(Game.last_touch_y - Self.center_y_position) < Self.tile_size / 2):
				custom_block rotate_self:
					increase(Self.times_tapped, by: 1)
					increase(Game.total_taps, by: 1)
					# Music taps so that the notes don't give away the solution
					increase(Self.music_taps, by: 1)
					play_note((59 + Self.symmetry) + Self.music_taps % Self.symmetry, rhythm: 0)
					broadcast_message(named: Self.üì£check_board)
					wait(seconds: 0)
					check_once_if(Game.board_complete == "true"):
						broadcast_message(named: Game.üì£Success)
		When i_get_a_message(Self.üì£check_board):
			check_if_else(Self.clone_index == 0):
				Game.board_complete = "true"
			else:
				check_once_if(Self.times_tapped % Self.symmetry != 0):
					Game.board_complete = "false"
		When i_get_a_message(join(Game.üì£provide_hint, with: "2")):
			# Can't rebroadcast the same message that caused the broadcast block to run, for.... some reason
			custom_block hint(msg: "3")
		When i_get_a_message(join(Game.üì£provide_hint, with: "3")):
			# Can't rebroadcast the same message that caused the broadcast block to run, for.... some reason
			custom_block hint(msg: "2")
		When i_get_a_message(Game.üì£provide_hint):
			custom_block hint(msg: "2"):
				check_if_else(Self.clone_index == 0):
					check_if_else (Game.‚ùìattempts < 10):
						Game.‚ùìindex = random(1, to: Game.board_width * Game.board_height) - 1
						increase(Game.‚ùìattempts, by: 1)
					else:
						Game.‚ùìchosen_hint = -1
						broadcast_message(named: Self.üì£first_hint)
				else:
					check_once_if(Game.‚ùìindex == Self.index and Game.‚ùìattempts < 10):
						check_if_else(Self.times_tapped % Self.symmetry != 0):
							custom_block hint_myself:
								custom_block summon_confetti
								custom_block rotate_self
						else:
							broadcast_message(named: join(Game.üì£provide_hint, with: msg))
		When i_get_a_message(Self.üì£first_hint):
			check_once_if(Game.‚ùìchosen_hint == -1 and Self.times_tapped % Self.symmetry != 0):
				Game.‚ùìchosen_hint = Self.index
				custom_block hint_myself

	text tap_count_display(text: "Taps: 0"):
		When game_starts:
			send_to_back
			set_position(to_x: Game.width / 2, y: Game.height - Self.height / 2 - 8)
			repeat_forever:
				set_text(to: join("Taps: ", with: Game.total_taps), color: h(Game.primary_color_hue, s: Game.primary_color_saturation + 60, b: Game.primary_color_brightness + 50))

	rounded_arrow back_button:
		When game_starts:
			send_to_back
			set_color(h(Game.primary_color_hue, s: Game.primary_color_saturation, b: Game.primary_color_brightness + 50))
			set_angle(180)
			set_origin(to_x: 8, y: 8)
		When is_tapped(Self):
			broadcast_message(named: Game.üì£back_to_level_select)

	square unplay_cover:
		Game.üì£back_to_level_select = "unplay"
		When game_starts:
			# Slight delay to give loading screen some time on returning to this screen
			repeat(times: 5):
				wait(seconds: 0)
			set_position(to_x: 014, y: 100000)
			set_width(Game.width * 2, height: Game.height * 2)
		When i_get_a_message(Game.üì£back_to_level_select):
			set_color(h(Game.primary_color_hue, s: Game.primary_color_saturation, b: Game.primary_color_brightness))
			bring_to_front
			start_sound("dash", wait: 0)
			custom_block ease_position_and_size(from_x: Game.width / 2, to_x: Game.width / 2, from_y: Game.height + Self.height, to_y: Game.height + 8 - Self.height / 2, from_size: Self.size_as_a_percent, to_size: Self.size_as_a_percent, milliseconds: 500)
			change_scene(to: Scenes.scene_1)
	text hints(text: "Need a hint?", resize_scale: 0.8):
		Game.üì£advertise_hints = "Hint! Hint!"
		Game.üì£provide_hint = "hint time"
		When game_starts:
			set_invisibility(percent: 100)
			set_origin(to_x: Game.width - Self.width - 8, y: 8)
			set_color(h(Game.primary_color_hue, s: Game.primary_color_saturation, b: Game.primary_color_brightness + 50))
		When Game.total_taps > Game.board_width * Game.board_height * 3 and Self.total_clones == 1:
			create_a_clone_of_this_object
		When object_is_cloned:
			custom_block ease_invisibility(from: 100, to: 0, milliseconds: 2000)
			repeat_forever:
				custom_block ease_invisibility(from: 0, to: 10, milliseconds: 1000)
				custom_block ease_invisibility(from: 10, to: 0, milliseconds: 1000)
		When is_tapped(Screen):
			check_once_if(Game.total_taps % (Game.board_width * Game.board_height * 3) == 0 and Self.clone_index > 0):
				broadcast_message(named: Game.üì£advertise_hints)
				custom_block summon_confetti:
					Game.üéâx = Self.x_position
					Game.üéây = Self.y_position
					broadcast_message(named: Game.üì£üéâspawn_confetti)
		When i_get_a_message(Game.üì£advertise_hints):
			check_once_if(Self.clone_index > 0):
				x = Self.x_position
				y = Self.y_position
				size = Self.size_as_a_percent
				custom_block ease_position_and_size(from_x: x, to_x: x - 100, from_y: y, to_y: y + 50, from_size: size, to_size: size * 1.5, milliseconds: 1000)
				turn(degrees: 10)
				turn(degrees: -20)
				turn(degrees: 10)
				custom_block ease_position_and_size(from_x: Self.x_position, to_x: x, from_y: Self.y_position, to_y: y, from_size: Self.size_as_a_percent, to_size: size, milliseconds: 1000)
		When Game.total_taps == 0 and Self.clone_index > 0:
			destroy
		When is_tapped(Self):
			Game.‚ùìattempts = 0
			broadcast_message(named: Game.üì£provide_hint)
	chevron hint_confetti(resize_scale: 0.1):
		Game.üì£üéâspawn_confetti = "Spawn confetti"
		When game_starts:
			set_position(to_x: 1000000000, y: -1000000)
		When i_get_a_message(Game.üì£advertise_hints):
			check_once_if(Self.clone_index == 0):
				create_clones_of_this_object(times: random(10, to: 20))
		When object_is_cloned:
			send_to_back
			set_invisibility(percent: random(0, to: 50))
			set_size(percent: random(50, to: 200) * Self.size_as_a_percent / 100)
			set_color(h(random(0, to: 360), s: Game.primary_color_saturation, b: Game.primary_color_brightness))
			set_angle(random(0, to: 360))
			angle = random(90, to: 180)
			speed = random(10, to: 40)
			horizontal_velocity = speed * cos(angle)
			vertical_velocity = speed * sin(angle)
			set_position(to_x: Game.üéâx, y: Game.üéây)
			repeat_forever:
				increase(vertical_velocity, by: -1)
				set_position(to_x: Self.x_position + horizontal_velocity, y: Self.y_position + vertical_velocity)
				check_once_if(Self.y_position < -100):
					destroy

Scene scene_1:

custom_block wait_for_level_with(index: 0):
	custom_block get_length_of(list: Game.generated_levels)
	check_once_if(Self.‚Ü©Ô∏èüìälist_length + Game.generated_levels_list_offset <= index):
		wait(seconds: 0)
		custom_block wait_for_level_with(index: index)