custom_block set_image_for(tile: "LRUD"):
	# First, get the directions in a known order
	directions = ":"
	check_once_if(tile MATCHES "L"):
		directions = join(directions, with: "L")
	check_once_if(tile MATCHES "R"):
		directions = join(directions, with: "R")
	check_once_if(tile MATCHES "U"):
		directions = join(directions, with: "U")
	check_once_if(tile MATCHES "D"):
		directions = join(directions, with: "D")
	# Now, directions will always be in the order LRUD, with a colon at the start.
	check_if_else(directions == ":L"):
		Self.ğŸ“ºwidth_multiplier = 1 / 3
		Self.ğŸ“ºheight_multiplier = 1 / 3
		Self.ğŸ“ºrotation_offset = -90
		Self.ğŸ“ºoffset_radius = 0.42
		Self.ğŸ“ºoffset_angle = 180
		Self.symmetry = 4
		set_image(bead)
	else:
		check_if_else(directions == ":LR"):
			Self.ğŸ“ºwidth_multiplier = 1
			Self.ğŸ“ºheight_multiplier = 0.35
			Self.ğŸ“ºrotation_offset = 0
			Self.ğŸ“ºoffset_radius = 0
			Self.ğŸ“ºoffset_angle = 0
			Self.symmetry = 2
			set_image(square)
		else:
			check_if_else(directions == ":LRU"):
				Self.ğŸ“ºwidth_multiplier = 1.06
				Self.ğŸ“ºheight_multiplier = 1.06
				Self.ğŸ“ºrotation_offset = 0
				Self.ğŸ“ºoffset_radius = 0.1762152821180555
				Self.ğŸ“ºoffset_angle = 90
				Self.symmetry = 4
				set_image(t_2)
			else:
				check_if_else(directions == ":LRUD"):
					Self.ğŸ“ºwidth_multiplier = 1
					Self.ğŸ“ºheight_multiplier = 1
					Self.ğŸ“ºrotation_offset = 45
					Self.ğŸ“ºoffset_radius = 0
					Self.ğŸ“ºoffset_angle = 0
					Self.symmetry = 1
					set_image(x)
				else:
					check_if_else(directions == ":LRD"):
						Self.ğŸ“ºwidth_multiplier = 1.06
						Self.ğŸ“ºheight_multiplier = -1.06
						Self.ğŸ“ºrotation_offset = 0
						Self.ğŸ“ºoffset_radius = 0.1762152821180555
						Self.ğŸ“ºoffset_angle = -90
						Self.symmetry = 4
						set_image(t_2)
					else:
						check_if_else(directions == ":LU"):
							Self.ğŸ“ºwidth_multiplier = 0.69
							Self.ğŸ“ºheight_multiplier = 0.69
							Self.ğŸ“ºrotation_offset = 0
							Self.ğŸ“ºoffset_radius = 0.24
							Self.ğŸ“ºoffset_angle = 135
							Self.symmetry = 4
							set_image(corner)
						else:
							check_if_else(directions == ":LUD"):
								Self.ğŸ“ºwidth_multiplier = 1.06
								Self.ğŸ“ºheight_multiplier = 1.06
								Self.ğŸ“ºrotation_offset = 90
								Self.ğŸ“ºoffset_radius = 0.169
								Self.ğŸ“ºoffset_angle = 180
								Self.symmetry = 4
								set_image(t_2)
							else:
								check_if_else(directions == ":LD"):
									Self.ğŸ“ºwidth_multiplier = 0.69
									Self.ğŸ“ºheight_multiplier = 0.69
									Self.ğŸ“ºrotation_offset = 90
									Self.ğŸ“ºoffset_radius = 0.24
									Self.ğŸ“ºoffset_angle = 225
									Self.symmetry = 4
									set_image(corner)
								else:
									check_if_else(directions == ":R"):
										Self.ğŸ“ºwidth_multiplier = 0.35
										Self.ğŸ“ºheight_multiplier = 0.35
										Self.ğŸ“ºrotation_offset = 90
										Self.ğŸ“ºoffset_radius = 0.42
										Self.ğŸ“ºoffset_angle = 0
										Self.symmetry = 4
										set_image(bead)
									else:
										check_if_else(directions == ":RU"):
											Self.ğŸ“ºwidth_multiplier = 0.69
											Self.ğŸ“ºheight_multiplier = 0.69
											Self.ğŸ“ºrotation_offset = -90
											Self.ğŸ“ºoffset_radius = 0.24
											Self.ğŸ“ºoffset_angle = 45
											Self.symmetry = 4
											set_image(corner)
										else:
											check_if_else(directions == ":RUD"):
												Self.ğŸ“ºwidth_multiplier = 1.06
												Self.ğŸ“ºheight_multiplier = 1.06
												Self.ğŸ“ºrotation_offset = -90
												Self.ğŸ“ºoffset_radius = 0.1762152821180555
												Self.ğŸ“ºoffset_angle = 0
												Self.symmetry = 4
												set_image(t_2)
											else:
												check_if_else(directions == ":RD"):
													Self.ğŸ“ºwidth_multiplier = 0.69
													Self.ğŸ“ºheight_multiplier = 0.69
													Self.ğŸ“ºrotation_offset = 180
													Self.ğŸ“ºoffset_radius = 0.24
													Self.ğŸ“ºoffset_angle = -45
													Self.symmetry = 4
													set_image(corner)
												else:
													check_if_else(directions == ":U"):
														Self.ğŸ“ºwidth_multiplier = 0.35
														Self.ğŸ“ºheight_multiplier = 0.35
														Self.ğŸ“ºrotation_offset = 180
														Self.ğŸ“ºoffset_radius = 0.42
														Self.ğŸ“ºoffset_angle = 90
														Self.symmetry = 4
														set_image(bead)
													else:
														check_if_else(directions == ":UD"):
															Self.ğŸ“ºwidth_multiplier = 0.35
															Self.ğŸ“ºheight_multiplier = 1
															Self.ğŸ“ºrotation_offset = 0
															Self.ğŸ“ºoffset_radius = 0
															Self.ğŸ“ºoffset_angle = 0
															Self.symmetry = 2
															set_image(square)
														else:
															check_if_else(directions == ":D"):
																Self.ğŸ“ºwidth_multiplier = 0.35
																Self.ğŸ“ºheight_multiplier = 0.35
																Self.ğŸ“ºrotation_offset = 0
																Self.ğŸ“ºoffset_radius = 0.42
																Self.ğŸ“ºoffset_angle = -90
																Self.symmetry = 4
																set_image(bead)
															else:
																set_text(to: "UNKNOWN!", color: h(0,s:100,b:100))
																show_popup(message:join("Unknown!", with: directions))