Import "advanced.htn"

custom_block get_probable_date_format:
	custom_block get_date_and_time_UTC
	# This will be wrong on the start and end of each month
	relative_hour_UTC = multiply(Self.↩️day_UTC - User.day, *: 24) + Self.↩️hour_UTC
	time_zone = User.hour - relative_hour_UTC
	time_zone = time_zone % 24
	# Assume everyone in the americas uses m/d/y, and everyone else uses d/m/y
	# Neither of those assumptions are correct
	check_if_else(time_zone >= -8 and time_zone <= -4):
		Self.↩️formatted_date = join(User.month, with: join("/", with: join(User.day, with: join("/", with: User.year))))
	else:
		Self.↩️formatted_date = join(User.day, with: join("/", with: join(User.month, with: join("/", with: User.year))))

custom_block get_date_and_time_UTC:
	# This assumes that it is the same year and month in UTC and local time, so it may be wrong around the end/start of each month
	# It also doesn't really work for dates before 1/1/1970, so don't expect it to be accurate if you're messing with your device's calendar
	years = User.year - 1970
	# This is incorrect after 2100, so your grandchildren may have this come out a day off!
	leap_years = ceiling(years / 4)
	current_year_is_a_leap_year = User.year % 4 == 0 and User.year % 100 != 0 or User.year % 400 == 0
	days = years * 365 + leap_years
	milliseconds_since_start_of_year_UTC = User.time - days * 24 * 3600 * 1000
	days_since_start_of_year_UTC = ceiling(milliseconds_since_start_of_year_UTC / 24 / 3600 / 1000)
	custom_block get_month(prev_days: 0, days: 0, current: 0, days_since_start_of_year: days_since_start_of_year_UTC, year_is_a_leap_year: current_year_is_a_leap_year)
	Self.↩️year_UTC = User.year
	Self.↩️month_UTC = Self.↩️month
	Self.↩️day_UTC = Self.↩️day
	Self.↩️hour_UTC = floor(User.time / 3600000) % 24
	Self.↩️minute_UTC = floor(User.time / 60000) % 60
	Self.↩️second_UTC = floor(User.time / 1000) % 60
	Self.↩️millisecond_UTC = User.time % 1000
	# a = join(":", with: join(Self.↩️minute_UTC, with: join(":", with: join(Self.↩️second_UTC, with: join(".", with: Self.↩️millisecond_UTC)))))
	# show_popup(message: join("The current time in UTC is, apparently: ", with: join(Self.↩️year_UTC, with: join("-", with: join(Self.↩️month_UTC, with: join("-", with: join(Self.↩️day_UTC, with: join(" at ", with: join(Self.↩️hour_UTC, with: a)))))))))

custom_block get_month(prev_days: 0, days: 0, current: 0, days_since_start_of_year: 172, year_is_a_leap_year: 1):
	check_if_else(days_since_start_of_year < days):
		Self.↩️month = current
		Self.↩️day = days_since_start_of_year - prev_days + 1
	else:
		check_if_else(current == 2):
			custom_block get_month(prev_days: days, days: days + 28 + year_is_a_leap_year, current: 3, days_since_start_of_year: days_since_start_of_year, year_is_a_leap_year: year_is_a_leap_year)
		else:
			check_if_else(current >= 8):
				custom_block get_month(prev_days: days, days: days + 30 + current % 2, current: current + 1, days_since_start_of_year: days_since_start_of_year, year_is_a_leap_year: year_is_a_leap_year)
			else:
				custom_block get_month(prev_days: days, days: days + 31 - current % 2, current: current + 1, days_since_start_of_year: days_since_start_of_year, year_is_a_leap_year: year_is_a_leap_year)

custom_block get_month_name:
	check_if_else(User.month == 1):
		Self.↩️month_name = "January"
	else:
		check_if_else(User.month == 2):
			Self.↩️month_name = "February"
		else:
			check_if_else(User.month == 3):
				Self.↩️month_name = "March"
			else:
				check_if_else(User.month == 4):
					Self.↩️month_name = "April"
				else:
					check_if_else(User.month == 5):
						Self.↩️month_name = "May"
					else:
						check_if_else(User.month == 6):
							Self.↩️month_name = "June"
						else:
							check_if_else(User.month == 7):
								Self.↩️month_name = "July"
							else:
								check_if_else(User.month == 8):
									Self.↩️month_name = "August"
								else:
									check_if_else(User.month == 9):
										Self.↩️month_name = "September"
									else:
										check_if_else(User.month == 10):
											Self.↩️month_name = "October"
										else:
											check_if_else(User.month == 11):
												Self.↩️month_name = "November"
											else:
												check_if_else(User.month == 12):
													Self.↩️month_name = "December"
												else:
													check_once_if(User.month == 014):
														Self.↩️month_name = "Oh.. it's finally 2019?"