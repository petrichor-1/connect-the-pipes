Import "secretblocks.htn"
Import "advanced.htn"
Import "../helpers/animation.htn"
Import "../helpers/tapsStorage.htn"
Import "../helpers/lists.htn"
Import "../helpers/stars.htn"
Import "../helpers/dateFormats.htn"
Import "./winScreenControllerSupport.htn"
Import "./hideOnPlay.htn"
Import "../dailyChallengeSummary.htn"

Scene game:
	square win_screen:
		Game.üì£show_win_buttons = "Show win buttons"
		Game.üì£show_stars = "show stars"
		custom_rule hide_on_play
		When game_starts:
			set_invisibility(percent: 100)
			check_once_if(Self.total_clones == 1):
				set_position(to_x: Game.width / 2, y: Game.height / 2)
				create_a_clone_of_this_object
				set_width(Game.width, height: Game.height)
				set_color(h(0, s: 0, b: 90))
		When object_is_cloned:
			set_text(to: "Level complete!", color: h(Game.primary_color_hue, s: 5, b: 5))
			set_tempo(480)
			set_position(to_x: Game.width / 2, y: Game.height * 0.8 + Self.height + 8)
		When i_get_a_message(Game.üì£Success):
			Game.is_win_screen_showing = "true"
			Game.win_screen_animation_skipped = 1
			bring_to_front
			custom_block ease_invisibility(from: 100, to: 20, milliseconds: 1000)
			check_if_else(Self.clone_index == 0):
				broadcast_message(named: Game.üì£show_stars)
				time = User.time
				wait_until(unix_timestamp_in_milliseconds: time + 1500 * Game.win_screen_animation_skipped)
				broadcast_message(named: Game.üì£show_win_buttons)
			else:
				note = 60
				repeat(times:6):
					play_note(note, rhythm: 0.25)
					increase(note, by: 1)
		When i_get_a_message(Game.üì£play):
			Game.is_win_screen_showing = "false"
		When is_tapped(Screen):
			check_once_if(Self.clone_index == 0):
				Game.win_screen_animation_skipped = 0

	text win_screen_level_display(text: "Level 4x4 ‚Äì 0", resize_scale: 0.8):
		custom_rule hide_on_play
		When game_starts:
			set_invisibility(percent: 100)
		When i_get_a_message(Game.üì£Success):
			check_if_else(Game.daily_challenge_active == "true"):
				custom_block get_probable_date_format
				set_text(to: join("Daily challenge ", with: join(Self.‚Ü©Ô∏èformatted_date, with: join(" ‚Äì ", with: join(Game.current_level_index, with: "/10")))), color: h(Game.primary_color_hue, s: 5, b: 5))
			else:
				set_text(to: join("Level ", with: join(Game.board_width, with: join("x", with: join(Game.board_height, with: join(" ‚Äì ", with: Game.current_level_index))))), color: h(Game.primary_color_hue, s: 5, b: 5))
			wait(seconds: 0)
			set_position(to_x: Game.width / 2, y: Game.height - 8 - 0.5 * Self.height)
			bring_to_front
			custom_block ease_invisibility(from: 100, to: 0, milliseconds: 900)

	text win_screen_tap_count_display(text: "0 taps", resize_scale: 0.75):
		custom_rule hide_on_play
		When game_starts:
			set_invisibility(percent: 100)
		When i_get_a_message(Game.üì£Success):
			set_text(to: join(Game.total_taps, with: " taps"), color: h(Game.primary_color_hue, s: 5, b: 5))
			wait(seconds: 0)
			set_origin(to_x: max(64, Game.width / 2 - 320), y: Game.height * 0.8 - 64)
			bring_to_front
			custom_block ease_invisibility(from: 100, to: 0, milliseconds: 900)

	text win_screen_new_highscore(text: "New highscore!", resize_scale: 0.75):
		custom_rule hide_on_play
		When game_starts:
			set_invisibility(percent: 100)
			set_origin(to_x: max(64, Game.width / 2 - 320), y: Game.height * 0.8 - 68 - Self.height)
		When i_get_a_message(Game.üì£Success):
			check_if_else(Game.daily_challenge_active == "true"):
				custom_block compute_stars(width: Game.board_width, height: Game.board_height, taps: Game.total_taps)
				increase(Game.daily_challenge_stars, by: Self.‚Ü©Ô∏èstars)
			else:
				custom_block get_taps_for_level(with_size: Game.board_width, at_index: Game.current_level_index)
				check_once_if (Game.total_taps < Self.‚Ü©Ô∏ètaps):
					custom_block set_taps_for_level(with_size: Game.board_width, at_index: Game.current_level_index, taps: Game.total_taps)
					custom_block get_taps_for_level(with_size: Game.board_width, at_index: Game.current_level_index)
					bring_to_front
					custom_block ease_invisibility(from: 100, to: 0, milliseconds: 900)
	text win_screen_new_levels_unlocked(text: "New levels unlocked!", resize_scale: 0.75):
		custom_rule hide_on_play
		When game_starts:
			set_invisibility(percent: 100)
			set_origin(to_x: max(64, Game.width / 2 - 320), y: Game.height * 0.8 - 72 - Self.height * 2)
		When i_get_a_message(Game.üì£Success):
			check_once_if(Game.daily_challenge_active != "true"):
				custom_block get_item_in(list: User.progress, at_index: Game.board_width - 4)
				check_once_if(Self.‚Ü©Ô∏èüìälist_item <= Game.current_level_index):
					custom_block set_item_in(list: User.progress, at_index: Game.board_width - 4, new_item: Game.current_level_index + 1)
					User.progress = Self.‚Ü©Ô∏èüìäset_list
					check_once_if(Game.current_level_index == 50):
						bring_to_front
						custom_block ease_invisibility(from: 100, to: 0, milliseconds: 900)

	star win_screen_stars:
		custom_rule hide_on_play
		When game_starts:
			set_invisibility(percent: 100)
			check_once_if(Self.total_clones == 1):
				create_clones_of_this_object(times: 2)
		When i_get_a_message(Game.üì£show_stars):
			custom_block compute_stars(width: Game.board_width, height: Game.board_height, taps: Game.total_taps)
			stars = Self.‚Ü©Ô∏èstars
			star_offset = Self.clone_index - 1
			final_size = 100 - absolute_value(star_offset) * 10
			final_x = Game.width / 2 + star_offset * 128
			final_y = Game.height / 2 - absolute_value(star_offset) * 8
			repeat(times: Self.clone_index):
				time = User.time
				wait_until(unix_timestamp_in_milliseconds: time + 500 * Game.win_screen_animation_skipped)
			set_size(percent: 0)
			set_invisibility(percent: 0)
			bring_to_front
			set_color(h(Game.primary_color_hue, s: Game.primary_color_saturation, b: Game.primary_color_brightness + 50))
			check_if_else(stars > Self.clone_index):
				start_sound("dash", wait: 0)
				custom_block ease_position_and_size(from_x: Game.width / 2, to_x: final_x, from_y: Game.height / 2, to_y: final_y, from_size: 0, to_size: final_size, milliseconds: 500 * Game.win_screen_animation_skipped)
			else:
				set_invisibility(percent: 100)
				set_position(to_x: final_x, y: final_y)
				set_size(percent: final_size * 0.9)
				set_color(h(Game.primary_color_hue, s: Game.primary_color_saturation / 2, b: Game.primary_color_brightness))
				custom_block ease_invisibility(from: 100, to: 10, milliseconds: 500 * Game.win_screen_animation_skipped)
	
	triangle next_level_button:
		custom_rule hide_on_play
		When game_starts:
			set_invisibility(percent: 100)
			set_position(to_x: Game.width / 2 + 182, y: Game.height * 0.2)
			set_color(h(Game.primary_color_hue, s: 5, b: 5))
			check_once_if(Self.total_clones == 1):
				create_clones_of_this_object(times: 2)
				set_angle(-90)
		When object_is_cloned:
			check_if_else(Self.clone_index == 1):
				set_text(to: "‚óØ", color: h(Game.primary_color_hue, s: 5, b: 5))
				set_position(to_x: Self.x_position - 10, y: Self.y_position - 2 * User.circle_center_y * Original_object.width)
				set_size(percent: 150 * User.circle_scale)
			else:
				set_image(square)
				set_width(182, height: 182)
		When i_get_a_message(Game.üì£show_win_buttons):
			bring_to_front
			# Just the last clone will be 99% invisible. This lets it be tapped but not seen
			custom_block ease_invisibility(from: 100, to: 99 * max(0, Self.clone_index - 1), milliseconds: 250 * Game.win_screen_animation_skipped)
		When is_tapped(Self):
			check_if_else(Game.current_level_index >= 1000 and Game.infinite_mode_is_active != "true"):
				broadcast_message(named: Game.üì£back_to_level_select)
			else:
				check_if_else(Game.daily_challenge_active == "true" and Game.current_level_index >= 10):
					change_scene(to: Scenes.daily_challenge_summary)
				else:
					increase(Game.current_level_index, by: 1)
					broadcast_message(named: Game.üì£play)
		When i_get_a_message("sum"):
			change_scene(to: Scenes.daily_challenge_summary)

	text replay_level_button(text: "‚Ü∫"):
		custom_rule hide_on_play
		When game_starts:
			set_invisibility(percent: 100)
			set_position(to_x: Game.width / 2, y: Game.height * 0.2)
			set_color(h(Game.primary_color_hue, s: 5, b: 5))
			check_once_if(Self.total_clones == 1):
				create_clones_of_this_object(times: 2)
				set_size(percent: 200)
				set_position(to_x: Self.x_position, y: Self.y_position - 10)
		When object_is_cloned:
			check_if_else(Self.clone_index == 1):
				set_text(to: "‚óØ", color: h(Game.primary_color_hue, s: 5, b: 5))
				set_position(to_x: Self.x_position, y: Self.y_position)
				set_size(percent: 150 * User.circle_scale)
			else:
				set_image(square)
				set_width(182, height: 182)
		When i_get_a_message(Game.üì£show_win_buttons):
			check_once_if(Game.daily_challenge_active != "true"):
				bring_to_front
				# Just the last clone will be 99% invisible. This lets it be tapped but not seen
				custom_block ease_invisibility(from: 100, to: 99 * max(0, Self.clone_index - 1), milliseconds: 250 * Game.win_screen_animation_skipped)
		When is_tapped(Self):
			check_once_if(Game.daily_challenge_active != "true"):
				broadcast_message(named: Game.üì£play)

	rounded_arrow win_screen_back_button:
		custom_rule hide_on_play
		When game_starts:
			set_invisibility(percent: 100)
			set_position(to_x: Game.width / 2 - 182, y: Game.height * 0.2)
			set_color(h(Game.primary_color_hue, s: 5, b: 5))
			check_once_if(Self.total_clones == 1):
				create_clones_of_this_object(times: 2)
				set_angle(180)
		When object_is_cloned:
			check_if_else(Self.clone_index == 1):
				set_text(to: "‚óØ", color: h(Game.primary_color_hue, s: 5, b: 5))
				set_position(to_x: Self.x_position, y: Self.y_position - 2 * User.circle_center_y * Original_object.height)
				set_size(percent: 150 * User.circle_scale)
			else:
				set_image(square)
				set_width(182, height: 182)
		When i_get_a_message(Game.üì£show_win_buttons):
			bring_to_front
			# Just the last clone will be 99% invisible. This lets it be tapped but not seen
			custom_block ease_invisibility(from: 100, to: 99 * max(0, Self.clone_index - 1), milliseconds: 250 * Game.win_screen_animation_skipped)
		When is_tapped(Self):
			broadcast_message(named: Game.üì£back_to_level_select)