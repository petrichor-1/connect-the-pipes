Import "../../helpers/rng.htn"

custom_block generate_level_2d(width: 5, height: 5, seed: 0):
	check_if_else("^(12|38|168|13)$" MATCHES seed):
		# Multiple solutions
		increase(seed, by: 10000)
	Self.random_seed = seed
	check_once_if(height * width + 1 != length(Self.↩️empty_board)):
		custom_block create_empty_level_2d(width: width, height: height)
	board = Self.↩️empty_board
	Self.↩️board_with_generated_tile = board
	x = -1
	repeat(times: width):
		y = -1
		increase(x, by: 1)
		repeat(times: height):
			increase(y, by: 1)
			board = Self.↩️board_with_generated_tile
			custom_block generate_tile_at_2d(x: x, y: y, board: board, width: width, height: height)
	Self.↩️generated_board = Self.↩️board_with_generated_tile

custom_block create_empty_level_2d(width: 0, height: 0):
	result = ":"
	repeat(times: width):
		repeat(times: height):
			result = join("????", with: result)
	Self.↩️empty_board = result

custom_block generate_tile_at_2d(x: 0, y: 0, board: "", width: 5, height: 5):
	connections = ":"
	forbidden_connections = ":"
	check_if_else (x < width - 1):
		custom_block get_connection_status_to_2d(direction: "L", x: x + 1, y: y, board: board, width: width)
		check_if_else(Self.↩️connection_status == "True"):
			connections = join("R", with: connections)
		else:
			check_once_if(Self.↩️connection_status == "False"):
				forbidden_connections = join("R", with: forbidden_connections)
	else:
		forbidden_connections = join("R", with: forbidden_connections)
	check_if_else (x > 0):
		custom_block get_connection_status_to_2d(direction: "R", x: x - 1, y: y, board: board, width: width)
		check_if_else(Self.↩️connection_status == "True"):
			connections = join("L", with: connections)
		else:
			check_once_if(Self.↩️connection_status == "False"):
				forbidden_connections = join("L", with: forbidden_connections)
	else:
		forbidden_connections = join("L", with: forbidden_connections)
	check_if_else (y < height - 1):
		custom_block get_connection_status_to_2d(direction: "D", x: x, y: y + 1, board: board, width: width)
		check_if_else(Self.↩️connection_status == "True"):
			connections = join("U", with: connections)
		else:
			check_once_if(Self.↩️connection_status == "False"):
				forbidden_connections = join("U", with: forbidden_connections)
	else:
		forbidden_connections = join("U", with: forbidden_connections)
	check_if_else (y > 0):
		custom_block get_connection_status_to_2d(direction: "U", x: x, y: y - 1, board: board, width: width)
		check_if_else(Self.↩️connection_status == "True"):
			connections = join("D", with: connections)
		else:
			check_once_if(Self.↩️connection_status == "False"):
				forbidden_connections = join("D", with: forbidden_connections)
	else:
		forbidden_connections = join("D", with: forbidden_connections)
	all_used_or_forbidden_directions = join(connections, with: forbidden_connections)
	custom_block get_random_direction_options_2d(forbidden: all_used_or_forbidden_directions)
	check_once_if(length(Self.↩️random_direction_options) > 1):
		custom_block get_random_number(between: 0, and_max: length(Self.↩️random_direction_options) - 2)
		index = Self.↩️random_number
		custom_block get_random_number(between: 1, and_max: length(Self.↩️random_direction_options) - 1 - index)
		repeat(times: Self.↩️random_number):
			connections = join(character_at_index(in: Self.↩️random_direction_options, at: index), with: connections)
			increase(index, by: 1)
	connections = join(characters_between(in: 10 ^ subtract(5, length(connections)), between: 1, and: 100), with: connections)
	generated_tile = characters_between(in: connections, between: 0, and: 4)
	index = (y * width + x) * 4
	Self.↩️board_with_generated_tile = join(characters_between(in: board, between: 0, and: index), with: join(generated_tile, with: characters_between(in: board, between: index + 4, and: length(board))))

custom_block get_tile_at_2d(x: 0, y: 0, board: "", width: 0):
	index = (y * width + x) * 4
	Self.↩️tile = characters_between(in: board, between: index, and: index + 4)

custom_block get_connection_status_to_2d(direction: "L", x: 0, y: 0, board: "", width: 0):
	check_if_else(characters_between(in: board, between: (y * width + x) * 4, and: (y * width + x) * 4 + 4) == "????"):
		Self.↩️connection_status = "Undefined"
	else:
		check_if_else(characters_between(in: board, between: (y * width + x) * 4, and: (y * width + x) * 4 + 4) MATCHES direction):
			# check_once_if(direction == "R" and x == 1 and y == 4):
			# 	show_popup(message: tile)
			Self.↩️connection_status = "True"
		else:
			Self.↩️connection_status = "False"

custom_block get_random_direction_options_2d(forbidden: ""):
	check_if_else(not(forbidden MATCHES "R")):
		custom_block get_random_direction_options_2d_L(forbidden: forbidden, result: "R:")
	else:
		custom_block get_random_direction_options_2d_L(forbidden: forbidden, result: ":")
custom_block get_random_direction_options_2d_L(forbidden: "", result: ":"):
	check_if_else(not(forbidden MATCHES "L")):
		custom_block get_random_direction_options_2d_U(forbidden: forbidden, result: join("L", with: result))
	else:
		custom_block get_random_direction_options_2d_U(forbidden: forbidden, result: result)
custom_block get_random_direction_options_2d_U(forbidden: "", result: ":"):
	check_if_else(not(forbidden MATCHES "U")):
		custom_block get_random_direction_options_2d_D(forbidden: forbidden, result: join("U", with: result))
	else:
		custom_block get_random_direction_options_2d_D(forbidden: forbidden, result: result)
custom_block get_random_direction_options_2d_D(forbidden: "", result: ":"):
	check_if_else(not(forbidden MATCHES "D")):
		Self.↩️random_direction_options = join("L", with: result)
	else:
		Self.↩️random_direction_options = result